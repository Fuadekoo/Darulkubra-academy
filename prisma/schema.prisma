// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  passcode  String
  createdAt DateTime @default(now())
}

model Teacher {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  passcode  String
  isActive  Boolean  @default(true)
  courses   Course[]
  createdAt DateTime @default(now())
}

model Student {
  id        String   @id @default(cuid())
  name      String
  passcode  String   @unique
  phoneNo   String
  status    Boolean  @default(true)
  startDate DateTime
  chatId    String
  progress  StudentProgress[]
  studentQuizzes StudentQuiz[]
  createdAt DateTime @default(now())
}

// COURSE SYSTEM
model Course {
  id        String   @id @default(cuid())
  title     String
  description String
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId String
  lessons   Lesson[]
  createdAt DateTime @default(now())
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  videoUrl  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  quiz      Quiz?
  order     Int
  StudentProgress StudentProgress[]
  createdAt DateTime @default(now())
}

// QUIZ STRUCTURE
model Quiz {
  id        String     @id @default(cuid())
  lesson    Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String     @unique
  questions Question[]
  StudentQuiz StudentQuiz[]
}

model Question {
  id             String           @id @default(cuid())
  quiz           Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId         String
  question       String
  questionOptions QuestionOption[]
  questionAnswer QuestionAnswer[]
  StudentQuizAnswer StudentQuizAnswer[]
}

model QuestionOption {
  id                String              @id @default(cuid())
  question          Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId        String
  option            String
  questionAnswer    QuestionAnswer[]
  studentQuizAnswers StudentQuizAnswer[]
}

model QuestionAnswer {
  id         String         @id @default(cuid())
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  answer     QuestionOption @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId   String         @map("questionOptionId")
}

// STUDENT QUIZ PARTICIPATION
model StudentQuiz {
  id         String        @id @default(cuid())
  student    Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String
  quiz       Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId     String
  score      Float?
  passed     Boolean       @default(false)
  takenAt    DateTime      @default(now())

  studentQuizAnswers StudentQuizAnswer[]

  @@unique([studentId, quizId])
}

model StudentQuizAnswer {
  id             String         @id @default(cuid())
  studentQuiz    StudentQuiz    @relation(fields: [studentQuizId], references: [id], onDelete: Cascade)
  studentQuizId  String
  question       Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String

  selectedOption QuestionOption @relation(fields: [optionId], references: [id])
  optionId       String         @map("questionOptionId")

  @@unique([studentQuizId, questionId])
}

// TRACK STUDENT LESSON PROGRESS
model StudentProgress {
  id        String   @id @default(cuid())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  completed Boolean  @default(false)
  completedAt DateTime?
  
  @@unique([studentId, lessonId])
}
